MEMORY {

    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    HEADER: 	start = $0000, size = $0010, file = %O ,fill = yes;
	PRGPAD:	 	start = $4000, size = $0800, file = %O ,fill = yes, define = yes;
    PRGROM: 	start = $4800, size = $b7c0, file = %O ,fill = yes, define = yes;
    DMC: 		start = $ffc0, size = $003a, file = %O, fill = yes;
    VECTORS: 	start = $fffa, size = $0006, file = %O, fill = yes;
    CHR: 		start = $0000, size = $2000, file = %O, fill = yes;
    RAM: 		start = $0300, size = $0500, define = yes;
  
}

SEGMENTS {

    HEADER:   load = HEADER, type = ro;
	PADDING:  load = PRGPAD, type = ro;
    STARTUP:  load = PRGROM, type = ro,  define = yes;
    LOWCODE:  load = PRGROM, type = ro,                optional = yes;
    INIT:     load = PRGROM, type = ro,  define = yes, optional = yes;
    CODE:     load = PRGROM, type = ro,  define = yes;
    RODATA:   load = PRGROM, type = ro,  define = yes;
    DATA:     load = PRGROM, type = rw,  define = yes, run = RAM; 
	SAMPLES:  load = DMC,    type = rw;
    VECTORS:  load = VECTORS,type = rw;
    CHARS:    load = CHR,    type = rw;
    BSS:      load = RAM,    type = bss, define = yes;
    HEAP:     load = RAM,    type = bss,               optional = yes;
    ZEROPAGE: load = ZP,     type = zp;
	
}

FEATURES {

    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
		
}

SYMBOLS {

    __STACKSIZE__ = $0500;  	# 5 pages stack
	
	NES_MAPPER	  = 0; 			# mapper number
	NES_PRG_BANKS = 3; 			# number of 16K PRG banks, change to 2 for NROM256
	NES_CHR_BANKS = 1; 			# number of 8K CHR banks
	NES_MIRRORING = 0; 			# 0 horizontal, 1 vertical, 8 four screen

}